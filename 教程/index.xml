<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程s on Kohaku</title>
    <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程s on Kohaku</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.kohaku.ink/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FFmpeg</title>
      <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/FFmpeg/</link>
      <pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/FFmpeg/</guid>
      <description>1 2 3 4 5  # MP4 文件转为 AVI 文件 ffmpeg -i input.mp4 output.avi # M4A 音频转为 FLAC 音频 ffmpeg -i input.</description>
    </item>
    
    <item>
      <title>Youtube 视频下载</title>
      <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/Youtube-%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/</link>
      <pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/Youtube-%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11  # 单独下载音频 yt-dlp -f &amp;#34;bestaudio[ext=m4a]&amp;#34; 视频链接 # 音频下载 m4a 转为 mp3 格式 yt-dlp -f &amp;#34;bestaudio[ext=m4a]&amp;#34; --extract-audio --audio-format mp3 --audio-quality 0 视频链接 # 视频下载最高质量 yt-dlp &amp;#34;bestvideo+bestaudio/best&amp;#34; 视频链接 # 选择视频和音频质量，会先展示不同种类的 id，然后根据 id 下载对应音视频文件就好 yt-dlp -F 视频链接   </description>
    </item>
    
    <item>
      <title>git</title>
      <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/git-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/git-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>远程仓库和本地仓库 commit 信息不一致 经常会遇到远程仓库已经有提交记录来初始化仓库，然后因为一些原因一直在本地提交代码的情况出现，这样本地的提交记录和远程的提交记录完全不一样，可以说毫无关联。遇到这种情况应该：
 首先添加远程仓库 git remote add origin 远程仓库链接 fetch 远程仓库 git fetch origin 如果本地分支和远程分支名字不一样可以直接提交本地分支到远程分支上去 如果一样需要新建一个名字不一样的分支用来合并并且删除名字一样的分支  git checkout -D 需要删除分支的名字 git checkout -b 名字不一样的分支   然后切回远程分支的主分支上并在本地也创建一个相同的，然后本地合并之前的那个需要合并的分支，由于两个分支的提交信息完全不同所以需要使用一些参数  git merge 名字不一样的分支 --allow-unrelated-histories 然后在本地解决掉有冲突的文件后再提交就合并了两个提交信息不一样的分支了    回退 commit  git reset --soft HEAD^ 可以回退已经 commit 的代码，所有代码会再次回到暂存区  连接 SSH  首先在自己电脑上生成公钥和私钥 ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.</description>
    </item>
    
    <item>
      <title>Flink 常见概念</title>
      <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/Flink-%E5%B8%B8%E8%A7%81%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/Flink-%E5%B8%B8%E8%A7%81%E6%A6%82%E5%BF%B5/</guid>
      <description>DataStream 和 DataStreamSource 是 Apache Flink 中的两个不同概念，它们在 Flink 作业中起到不同的作用。
 DataStream：  DataStream 是 Apache Flink 的一个核心抽象，用于表示处理流数据的无界数据集。它表示了一个数据集的连续流，并提供了用于转换、过滤、分组、窗口等操作的 API。可以将 DataStream 看作是一个流式处理作业的中间或最终结果。</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/Kafka/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/Kafka/</guid>
      <description>Kafka 是一种分布式流处理平台，主要用于构建实时数据流管道和实时应用程序。它可以处理大量数据，并且具有高吞吐量、低延迟和可扩展性等特点。Kafka 由 LinkedIn 开发，后来成为 Apache 开源项目。
基本概念   Producer：生产者是向 Kafka 发送消息的客户端，通常会将数据源中的数据发送到 Kafka。
  Consumer：消费者是从 Kafka 接收消息的客户端，通常会对接收到的数据进行处理或存储。
  Broker：Kafka [[教程/集群和服务器|集群中的单个服务器]]，负责存储和处理消息。一个 Kafka 集群通常包含多个 Broker。</description>
    </item>
    
    <item>
      <title>集群和服务器</title>
      <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/%E9%9B%86%E7%BE%A4%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/%E9%9B%86%E7%BE%A4%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>集群（Cluster）和服务器（Server）是计算机网络和分布式系统领域的两个重要概念。它们之间的主要区别在于规模、功能和用途。
集群（Cluster）：   规模：集群通常由多台计算机（服务器）组成，这些计算机共同协作来完成某个任务或提供某种服务。
  功能：集群的主要目的是通过分布式计算来提高性能、可扩展性和可靠性。集群中的多台计算机可以共享计算和存储资源，实现负载均衡和故障切换。
  用途：集群广泛应用于大数据处理、高性能计算、高可用服务等领域，例如 Hadoop 集群、Kubernetes 集群等。
  服务器（Server）：   规模：服务器通常是指一台计算机，它具有较高的性能和可靠性，用于提供某种服务。</description>
    </item>
    
    <item>
      <title>网页上传原理</title>
      <link>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/%E7%BD%91%E9%A1%B5%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/%E6%95%99%E7%A8%8B/%E7%BD%91%E9%A1%B5%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86/</guid>
      <description>FileReader 对象用于读取用户在浏览器中选择的文件。这在处理文件上传、读取文件内容以显示在页面上或解析文件数据时非常有用。
FileReader 对象包含了一系列方法和事件，让你能够以不同的方式读取文件数据，例如：
 readAsText(file, encoding): 以文本形式读取文件内容，可以指定编码方式，通常是 &amp;ldquo;UTF-8&amp;rdquo;。 readAsDataURL(file): 读取文件内容并将其转换为 base64 编码的 data URL，这在显示图片或其他媒体文件时非常有用。 readAsArrayBuffer(file): 以 ArrayBuffer 形式读取文件内容，这在处理二进制数据时非常有用，比如图像、音频或视频文件。  FileReader 对象还包含了一些事件，例如：</description>
    </item>
    
  </channel>
</rss>
