<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programmings on Kohaku</title>
    <link>https://www.kohaku.ink/programming/</link>
    <description>Recent content in Programmings on Kohaku</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 27 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.kohaku.ink/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React</title>
      <link>https://www.kohaku.ink/Programming/React/</link>
      <pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/Programming/React/</guid>
      <description> React 的基础和介绍 🎯 JSX：语法及其特性 💡 组件：函数组件和类组件 👨‍💻 Props 和 State：理解和使用 🚀 生命周期方法 🔨 React Hooks：使用和理解 🎯 高阶组件和 Render Props 👨‍💻 使用 Context 进行状态管理 💡 性能优化技巧 🚀 在 React 中使用路由 🔨 React 中的测试策略 🎯 实际项目：构建一个 React 应用 👨‍💻  </description>
    </item>
    
    <item>
      <title>python 虚拟环境</title>
      <link>https://www.kohaku.ink/Programming/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/Programming/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>如何创建虚拟环境(win)  pip install virtualenvwrapper-win 安装虚拟环境管理工具，统一设置虚拟环境存放位置 2. setx WORKON_HOME D:\virtual_environments 设置系统环境变量 3. mkvirtualenv myenv 创建虚拟环境，此虚拟环境会存放在 D:\virtual_environments 下，创建多个虚拟环境则会在文件夹下创建多个子文件夹 workon 来列出所有的虚拟环境，workon myenv 则是进入创建的 myenv 环境，此时命令行前面会带此环境的标识 一般一个大项目对应一个虚拟环境，因为多个环境之间所需要的依赖也大不相同，版本之间也存在冲突 删除某个虚拟环境 rmvirtualenv myenv  </description>
    </item>
    
    <item>
      <title>TypeScript</title>
      <link>https://www.kohaku.ink/Programming/TypeScript/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/Programming/TypeScript/</guid>
      <description>和 JS 的区别 nodejs 项目使用 TS .d.ts 文件和普通类型文件 在 TypeScript 中，你可以使用 .ts 文件定义类型（例如接口、类型别名等），也可以使用 .d.ts 声明文件来定义类型。两者之间的主要区别在于它们的使用场景和可见性。
普通类型定义 在 .ts 文件中定义的类型仅在该文件或者明确导入该文件的地方可见。这种类型定义通常用于在单个文件或模块中使用的类型，或者当你想显式控制类型的可见性时。例如，你可能会在一个类或函数的定义中使用接口，这个接口只在这个类或函数的文件中使用。
声明文件（.d.ts） 在 .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.kohaku.ink/Programming/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kohaku.ink/Programming/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>目录  📚介绍数据结构基础 📚详细讲解数组和链表的原理与应用 🔍对比分析数组和链表 📚学习栈和队列的概念，原理和应用 📚深入理解树和图的基础知识和应用 💡理解并实现常见的搜索算法，例如深度优先搜索和广度优先搜索 📚学习排序算法的基础知识，如冒泡排序，选择排序，插入排序等 🔍深入理解更复杂的排序算法，例如快速排序，归并排序，堆排序等 🔨在实际问题中应用所学的数据结构和算法  </description>
    </item>
    
  </channel>
</rss>
