{"/":{"title":"Kohaku","content":"\n## 关于我\n我是 Kohaku，一名软件开发工程师。目前主要在做前端开发，会一点后端和数据开发，这是我的个人数字花园，用来记录平时的闪念笔记以及总结内容。\n\n## 技能点\n- AI 训猴师\n- Apex 白银\n- 24岁魔法师\n- 不会算法题的程序员\n- ……\n\n你可能想知道如何搭建这样一套本地笔记同步到花园，这里有搭建教程(注意：这套教程仅针对有一定编程能力的人，涉及到细节部分需要自己摸索)\n[[教程/obsidian本地内容同步到数字花园]]\n\n如果你对动画或者漫画感兴趣也可以访问我的 [[漫画/Anime 花园]]，请多指教！\n\n","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80%E9%80%89%E5%9E%8B":{"title":"实时数据开发语言选型","content":"\n\u003e 以下回答均由 GPT4 生成，后续会根据实际使用情况做更改\n\n### 问：做 Flink 实时流数据开发使用 Python 还是 Scala 更好？\n在实时流数据处理中，Apache Flink 提供了对 Java、Scala 和 Python 的支持。然而，在性能和生态系统方面，Scala 和 Java 通常比 Python 更优越。以下是关于在 Flink 实时流数据开发中选择 Python 和 Scala 的一些比较：\n\n1. 性能：\n   - Scala：作为一种运行在 Java 虚拟机（JVM）上的静态类型语言，Scala 具有很好的性能。Scala 与 Java 共享底层运行时，因此在性能方面与 Java 类似。\n   - Python：Python 是一种动态类型语言，通常在性能方面不如 Scala。Flink 使用 PyFlink 支持 Python API，但由于全局解释器锁（GIL）和其他原因，Python 在性能上通常不如 JVM 语言（如 Scala 和 Java）。\n\n2. 生态系统和社区支持：\n   - Scala：Flink 本身是用 Scala 编写的，因此在 API 和功能方面与 Scala 有很好的兼容性。Scala 在大数据和流处理领域有丰富的生态系统和社区支持。\n   - Python：虽然 Flink 支持 Python API，但与 Scala 和 Java 生态系统相比，Python 社区在 Flink 方面的支持相对较弱。\n\n3. 编程模型和语法：\n   - Scala：Scala 是一种功能强大且表达性丰富的编程语言，具有优雅的语法和强大的类型系统。Scala 允许你使用函数式编程和面向对象编程范式，易于编写简洁、可读的代码。\n   - Python：Python 是一种非常流行且易于学习的编程语言，语法简单直观。这使得使用 Python 编写代码变得更加容易，尤其是对于初学者。\n\n综上所述，对于 Flink 实时流数据开发，建议选择 Scala，因为它在性能和生态系统方面具有优势。然而，如果你的团队已经熟悉 Python 且对性能要求不高，可以考虑使用 Python 进行开发。在实际项目中，选择合适的语言取决于团队的技能、项目需求和性能要求。\n\n### 问：Java 和 Scala 相比呢，哪种更适合开发 Flink 实时流数据\n在选择 Java 和 Scala 作为 Flink 实时流数据处理开发语言时，二者各有优势。以下是 Java 和 Scala 的一些比较：\n1. 性能：\n   - Java：Java 是一种运行在 Java 虚拟机（JVM）上的静态类型语言，具有良好的性能。\n   - Scala：Scala 同样运行在 JVM 上，与 Java 共享底层运行时。因此，在性能方面，Java 和 Scala 都具有相似的优势。\n\n2. 生态系统和社区支持：\n   - Java：Java 拥有庞大的生态系统和社区支持，是实时流处理和大数据领域的主要编程语言之一。\n   - Scala：Flink 本身是用 Scala 编写的，因此在 API 和功能方面与 Scala 有很好的兼容性。Scala 同样在大数据和流处理领域拥有丰富的生态系统和社区支持。\n\n3. 编程模型和语法：\n   - Java：Java 是一种面向对象的编程语言，语法相对简单。Java 在 Java 8 及更高版本中引入了对 Lambda 表达式和 Stream API 的支持，使得编写函数式编程风格的代码变得更加简单。\n   - Scala：Scala 是一种功能强大且表达性丰富的编程语言，支持函数式编程和面向对象编程范式。Scala 的语法更加简洁和优雅，使得编写可读性更强的代码变得更加容易。\n\n综上所述，从性能和生态系统的角度看，Java 和 Scala 都适合用于 Flink 实时流数据处理开发。在实际项目中，选择哪种语言取决于团队的技能和编程风格偏好。如果团队熟悉 Java 且更倾向于面向对象编程，那么 Java 可能是一个更好的选择。而如果团队熟悉 Scala 且喜欢函数式编程风格，Scala 可能是更适合的选择。","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE-Flink-%E8%B7%AF%E7%BA%BF%E5%9B%BE":{"title":"实时数据 Flink 路线图","content":"\n\u003e 以下是 GPT4 生成的为期三个月的 Flink 实时数据开发的路线图，每个技能及学习的知识都列出了具体时限以及实践内容\n\n了解你的需求。下面是一个针对 Flink 实时数据开发（使用 Java）的学习路线图，其中每个阶段都包含实践内容：\n\n1. Java 基础加强（1 周）：\n   - 学习 Java 面向对象编程（OOP）的概念，如类、对象、继承、封装和多态。\n   - 熟悉 Java 集合框架，如 List、Set、Map 等。\n   - 学习 Java 8 新特性，如 Lambda 表达式、Stream API 和 Optional 类。\n   - 实践：完成一些简单的 Java 编程练习，如实现数据结构和算法。\n\n2. 数据库与 SQL（1 周）：\n   - 学习关系型数据库的基本概念，如表、行、列、主键、外键等。\n   - 学习 SQL 语言，包括 DDL（数据定义语言）、DML（数据操作语言）和查询操作。\n   - 熟悉至少一种关系型数据库管理系统（如 MySQL、PostgreSQL 或 Oracle）的使用。\n   - 实践：创建一个简单的数据库并编写 SQL 查询来实现数据操作。\n\n3. Apache Kafka 简介（3 天）：\n   - 学习 Apache Kafka 的基本概念，如生产者、消费者、主题和分区。\n   - 了解如何使用 Java 编写 Kafka 生产者和消费者。\n   - 实践：搭建一个简单的 Kafka 集群，并使用 Java 编写一个生产者和消费者程序。\n\n4. Apache Flink 入门（2 周）：\n   - 学习 Flink 的核心概念，如流处理、有界和无界数据集、窗口操作和时间处理。\n   - 学习 Flink 的 DataStream API 和 ProcessFunction。\n   - 学习如何使用 Java 进行 Flink 编程。\n   - 实践：使用 Flink 处理 Kafka 中的实时数据，并实现一些简单的数据转换和窗口操作。\n\n5. Flink 中的状态管理和容错（1 周）：\n   - 学习 Flink 中的状态管理和容错机制，如状态后端、检查点和恢复。\n   - 学习如何使用 Flink 的状态 API 进行状态管理。\n   - 实践：在 Flink 程序中使用状态管理，并设置检查点以确保容错。\n\n6. Flink 应用优化与调试（1 周）：\n   - 学习如何监控和调试 Flink 应用。\n   - 了解 Flink 应用的性能调优策略，如资源分配、并行度和缓存。\n   - 实践：监控和调试一个 Flink 实时数据处理应用，并尝试进行性能优化。\n\n7. 实战项目（1 周）：\n   - 根据所学知识，选择一个实际的实时数据处理场景，设计一个 Flink 数据处理项目。\n   - 使用 Java 编写 Flink 程序，处理来自 Kafka 的实时数据流，实现数据清洗、转换、窗口聚合等操作。\n   - 对 Flink 程序进行优化和调试，确保稳定性和性能。\n   - 将处理结果存储到关系型数据库或其他存储系统中。\n\n在学习过程中，请确保将所学知识应用于实际场景，并积累实践经验。参考优质的在线教程、书籍和官方文档，以便更好地学习和巩固知识。此外，可以积极参与 Flink 社区，提问和解答问题，以便更好地学习和巩固知识。\n\n完成这个学习路线图后，你应该能够入门 Flink 实时数据开发并具备完成基础开发任务的能力。不过，请记住，学习是一个持续的过程，你需要不断地实践、探索和更新知识。祝你学习顺利！","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92":{"title":"年度计划","content":"\n转眼间2023年也已过半，但是自身感觉却没过多长时间，这可能是因为把时间都放到了一成不变的事情上去并没有取得多大的进步和成就。在之前的 obsidian 仓库中也列出了年度计划，现在要在之前的计划上有更多的增补。","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%95%99%E7%A8%8B/obsidian%E6%9C%AC%E5%9C%B0%E5%86%85%E5%AE%B9%E5%90%8C%E6%AD%A5%E5%88%B0%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD":{"title":"obsidian本地内容同步到数字花园","content":"\n## 准备工作\n1. 首先 fork 两个模板项目作为参考","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%AF%8F%E6%97%A5/2023-04-09":{"title":"2023-04-09","content":"\n每天花在电脑上的时间实在是太长了，准确来说是电脑消遣方面。上电脑无非就是几件事情：看视频消遣、玩游戏消遣、看 TradingView 和 Twitter 消磨时光，除此以外几乎不会拿电脑做任何正事或者是有意义的事情。不论是平时还是周末，几乎都只是在电脑前坐着然后做上述几件事情来消磨时光，这在我看来很可悲，因为这样做的意义也只是让思维僵化然后循规蹈矩地做这几件已经习以为常的事情。\n\n1. 工作时间内专心一些，最好把时间都放入到写代码完成业务中而不是抱着完成任务的心态去做工作\n2. 减少面对电脑或者手机的时间增加看纸质书的时间，过去几个月几乎没有翻过书，没有看书的日子就是没头苍蝇很迷茫的日子，只能靠电脑来消磨时光\n3. 在自己的专业领域投入更多的时间，不仅仅是技术上需要精进更重要的是理解自己为何而工作，什么样的工作能让自己持之以恒地做下去不会一段时间一个想法","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%AF%8F%E6%97%A5/2023-04-10":{"title":"2023-04-10","content":"学习网页上传文件并处理功能[[网页上传原理]]，对于上传的整体流程有了更为深入的理解","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%AF%8F%E6%97%A5/2023-04-11":{"title":"2023-04-11","content":"\n### 工作心态和个人心态的平衡\n工作中很难避免地会出现很多指标，当指标变得越来越多的时候人的心态就会出现变化特别是指标变成强制而且和绩效挂钩的时候，能在工作中全身心投入到代码开发或者学习提升的时间变得越来越少，而时间基本都放到如何将指标提升上去这一行为中。\n\n而实际上指标完成率高和是否把事情做好基本没有太大的关系，很多时候员工只会想方设法地做一些毫无意义的事情或者瞒报虚报来把指标提高，特别是领导特别重视或者说本身就是靠着这种方法上位的人则更是这样。久而久之就会发现只要有问题就会想法设法地拉会议提出解决方法然后要求你闭环，但是会议的主题却并不是当机立断地结合实际问题把解决问题的方法确定下来而是想法设法出文档出方案要求用数据或者指标闭环来确保这个事情确实得到了解决，最终的结果大多就是 wiki 文档或者 wps 云文档上又多出了一份垃圾来增加搜索真正有用文档的难度。\n\n那么如何平衡自己工作时的心态以及平时生活的心态来让自己不要把怒气代入到工作中呢？我目前的心得体验是工作的时候尽量认真对待，但是需要每天从工作时间抽出固定的时间留给自己去做总结和提炼(例如今天写业务时碰到的问题是如何解决的，通过这个问题我学到了什么)，遇到指标上的事情照做不误就是了因为是公司要求的而又是它给我钱，反正我工作时间就这么多，其他事情做不完直接和领导说就是不要自己烦扰自己。最主要的就是每天要有所收获，无论是工作上还是工作外，这样才有持续生活的动力才不会觉得自己的生活就只有工作。","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%AF%8F%E6%97%A5/2023-04-12":{"title":"2023-04-12","content":"\n今天在工作中没有做总结，工作中主要做了两件事：帮其他组重建 React 项目，搭了包括配置项、请求封装、git 钩子等等脚手架，整体基于 umimax。跟进测试问题，修复了负数数字没有动画的问题。\n\n使用 umimax 最新版的时候遇到了两个之前没碰到过的问题：\n1. VS Code 自带 [[TypeScript]] 编译器可能和项目安装的 TypeScript 版本不一致，如果项目内版本更高一些则会导致 tsconfig.json 配置文件报错从而导致整个项目的导入都有问题，有两个解决方案，一个是降级项目内的 TypeScript 版本另外一个就是设置 VS Code 的 TypeScript 版本，一般推荐第二种。第二种设置之后会在项目顶端生成 .vscode 文件夹，里面放着 setting.json 配置文件指定了 VS Code 配置项。\n2. 作业条请求封装的问题，之前从来没接触过作业条后端所以今天相当于重新学习了这种请求体如何封装以及返回的参数是什么，由于项目内基本都是作业条请求所以无需做过剩的封装，做一层简单的错误处理以及拿到响应体里面需要的数据即可。\n\n做事要认真这个没问题，但是同时也要结合实际业务场景去考虑一些事情是否需要做的如此复杂例如考虑的请求封装，由于项目内全是作业条请求所以基本不需要做过多的封装，完成后时间可以投入到其他事情中去。","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%AF%8F%E6%97%A5/2023-04-14":{"title":"2023-04-14","content":"\n","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%AF%8F%E6%97%A5/2023-04-16":{"title":"2023-04-16","content":"\n最近的生活状态实在不太规律，经常性的1-2点睡觉然后7点半左右起床，平均下来每天的睡眠时间可能只有6个小时不到。而且由于中午55才下班，回去做完饭洗完碗可能都会一点过不少了，这个只能自己适应：要不就午睡时间缩短一点要不就提前晚上做好第二天的饭然后加热就行。\n\n最大的问题是我平均睡眠时间短是因为玩游戏的时间太多了，或者说固态化三件套时间太多了：基本就是 Youtube、Twitter、Tradingview 三个软件之间来回切换，然后除此以外的时间都在玩 Apex，基本没有时间放在认真读书和研究技能上的事情。减脂这件事情也因为不规律的生活导致进度拖延：这两周体重基本没有变化，虽然有持续在运动(因为吃的东西方面没有控制，经常中午不想做饭了就去吃麦当劳)。\n\n最近的表现实在是太不尽如人意，随着年龄的越来越大逐渐发现有些事情无法改变，但是有一点是我可以肯定的：只要持之以恒地做某件事情，那么这件事情在手中就会做的越来越好，起初可能完全带来不了任何收益而且会占用大量的时间但是随着时间的推进能做到的事情要远超自己想象。**我会先从放弃网游和看没营养的视频开始把时间慢慢地挪出来做更有意义的事情。**\n\n明天要做的最重要的事情就是把 [[年度计划|年度计划]] 都大致列一个，看看哪些事情对目前的自己是最重要的，如何去达成它们，不在乎最终达成的结果而是在意过程如何。","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%AF%8F%E6%97%A5/2023-04-17":{"title":"2023-04-17","content":"\n最近工作上需要使用代码开发重构之前使用可视化平台开发的作业，[[实时数据开发语言选型]]上斟酌了很久，最后决定采用 Java 开发。组内没有任何使用代码开发数据的经验，前期选型语言上就花费了大量的时间，需要慢慢结合实践去熟悉 Java 的使用以及流数据代码开发。为此也根据 GPT4 列出实时数据代码开发的[[实时数据 Flink 路线图|路线图]]。","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%BC%AB%E7%94%BB/%E6%88%91%E5%BF%83%E9%87%8C%E5%8D%B1%E9%99%A9%E7%9A%84%E4%B8%9C%E8%A5%BF":{"title":"我心里危险的东西","content":"\n真正的熬夜看完了这本漫画，大抵算是人生中真正意义上的第一次熬夜(指超过早上八点不睡觉)","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E6%BC%AB%E7%94%BB/Anime-%E8%8A%B1%E5%9B%AD":{"title":"Anime 花园","content":"\n这里是 Anime 花园，请多指教！\n[[漫画/我心里危险的东西]]","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/%E7%BD%91%E9%A1%B5%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86":{"title":"网页上传原理","content":"**FileReader** 对象用于读取用户在浏览器中选择的文件。这在处理文件上传、读取文件内容以显示在页面上或解析文件数据时非常有用。\n\nFileReader 对象包含了一系列方法和事件，让你能够以不同的方式读取文件数据，例如：\n1.  readAsText(file, encoding): 以文本形式读取文件内容，可以指定编码方式，通常是 \"UTF-8\"。\n2.  readAsDataURL(file): 读取文件内容并将其转换为 base64 编码的 data URL，这在显示图片或其他媒体文件时非常有用。\n3.  readAsArrayBuffer(file): 以 ArrayBuffer 形式读取文件内容，这在处理二进制数据时非常有用，比如图像、音频或视频文件。\n\nFileReader 对象还包含了一些事件，例如：\n1.  onload: 当文件读取操作成功完成时触发。\n2.  onerror: 当文件读取操作失败时触发。\n3.  onprogress: 当文件读取操作正在进行时触发。\n\n### 示例代码\n``` html\n\u003cinput type=\"file\" id=\"inputImage\"\u003e\n\u003cimg id=\"displayImage\" alt=\"Selected image\"\u003e\n```\n\n\n``` javascript\nconst inputImage = document.getElementById('inputImage');\nconst displayImage = document.getElementById('displayImage');\n\ninputImage.addEventListener('change', (event) =\u003e {\n  const file = event.target.files[0]; // 获取用户选择的第一个文件\n  if (file \u0026\u0026 file.type.startsWith('image/')) { // 确保文件是图像\n    const reader = new FileReader();\n\n    // 当读取操作成功完成时，将图片的data URL设置为\u003cimg\u003e标签的src属性\n    reader.onload = (e) =\u003e {\n      displayImage.src = e.target.result;\n    };\n\n    // 使用readAsDataURL方法读取图像文件\n    reader.readAsDataURL(file);\n  } else {\n    alert('Please select a valid image file.');\n  }\n});\n\n```\n\n`reader.readAsDataURL(file)`是必不可少的。实际上，`e.target.result`中的base64编码的图片数据是在`reader.readAsDataURL(file)`执行后得到的。`readAsDataURL()`方法是`FileReader`对象用来读取文件内容并将其转换为base64编码的DataURL的函数。当这个方法被调用时，FileReader对象会开始读取指定的文件并在完成时触发`onload`事件。","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null},"/TypeScript":{"title":"TypeScript","content":"\n待完善","lastmodified":"2023-04-17T07:39:57.231572862Z","tags":null}}